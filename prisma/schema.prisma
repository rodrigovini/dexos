generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
}

// Modelo de User
model User {
    id             String     @id @default(uuid())
    email          String     @unique
    username       String     @unique
    fullName       String
    hashedPassword String?
    salt           String?
    addressId      String?
    address        Address?   @relation(fields: [addressId], references: [id])
    whatsappNumber String
    facebook       String?
    twitter        String?
    instagram      String?
    linkedin       String?
    createAt       DateTime   @default(now())
    roles          UserRole[]

    orders Order[] @relation("user_orders")
}

// Modelo de Client
model Client {
    id                String    @id @default(uuid())
    clientType        String
    name              String
    email             String
    fullName          String?
    gender            String?
    dateOfBirth       DateTime?
    cpf               String?   @unique
    addressId         String?
    address           Address?  @relation(fields: [addressId], references: [id])
    nationality       String?
    rg                String?
    companyName       String?
    tradeName         String?
    cnpj              String?   @unique
    stateRegistration String?
    activityField     String?
    residentialPhone  String?
    cellPhone         String?
    commercialPhone   String?
    createAt          DateTime  @default(now())

    // ... outros campos do cliente

    orders Order[] @relation("client_orders")
}

// Modelo de Technician
model Technician {
    id              String   @id @default(uuid())
    name            String
    fullName        String
    email           String
    cellPhone       String
    commercialPhone String?
    createAt        DateTime @default(now())
    // ... outros campos do técnico

    orders Order[] @relation("technician_orders")
}

// Modelo de Brand (Marca)
model Brand {
    id   String @id @default(uuid())
    name String
    // Outros campos específicos da marca, se necessário

    models    Model[] // Relacionamento com modelos
    Equipment Equipment[]
}

// Modelo de Model (Modelo do Equipamento)
model Model {
    id   String @id @default(uuid())
    name String
    // Outros campos específicos do modelo, se necessário

    brand     Brand?      @relation(fields: [brandId], references: [id])
    brandId   String
    Equipment Equipment[]
}

// Modelo de EquipmentType (Tipo de Equipamento)
model EquipmentType {
    id   String @id @default(uuid())
    name String
    // Outros campos relacionados ao tipo de equipamento, se necessário

    equipments Equipment[] // Relacionamento com equipamentos desse tipo
}

// Modelo de Equipment
model Equipment {
    id           String @id @default(uuid())
    description  String
    serialNumber String
    modelNumber  String

    // ... outros campos do equipamento

    brand   Brand?  @relation(fields: [brandId], references: [id])
    brandId String?

    model   Model?  @relation(fields: [modelId], references: [id])
    modelId String?

    equipmentType   EquipmentType? @relation(fields: [equipmentTypeId], references: [id])
    equipmentTypeId String?
    // ... outros campos do equipamento
    createAt        DateTime       @default(now())

    orders Order[] @relation("equipment_orders")
}

// Modelo de Order
model Order {
    id           String      @id @default(uuid())
    status       String?     @default("Aguardando")
    createdAt    DateTime    @default(now())
    createdBy    User?       @relation("user_orders", fields: [createdById], references: [id])
    createdById  String?
    client       Client?     @relation("client_orders", fields: [clientId], references: [id])
    clientId     String?
    technician   Technician? @relation("technician_orders", fields: [technicianId], references: [id])
    technicianId String?
    equipment    Equipment?  @relation("equipment_orders", fields: [equipmentId], references: [id])
    equipmentId  String?

    // ... outros campos da ordem de serviço
}

// Modelo de UserRole
model UserRole {
    id    String @id @default(uuid())
    name  String
    users User[] // Relacionamento com usuários
}

model Address {
    id           String   @id @default(uuid())
    street       String
    number       String
    complement   String?
    neighborhood String?
    zipCode      String
    city         String?
    state        String?
    country      String?
    User         User[]
    Client       Client[]
    createAt     DateTime @default(now())
}
